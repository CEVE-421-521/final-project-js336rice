---
title: "Final Project Report"
bibliography: JBibliography.bib
author: "Jonah Schaechter (JS336)"
jupyter: julia-1.10
date: 2024-04-30

# YOU DO NOT NEED BOTH PDF AND DOCX.
# COMMENT OR DELETE THE ONE YOU DON'T WANT TO USE.
#
# Feel free to customize the look of your final document:
# https://quarto.org/docs/reference/formats/pdf.html
# https://quarto.org/docs/reference/formats/docx.html

format: 
    pdf:
        cite-method: biblatex  #added this for bib
        documentclass: article
        fontsize: 11pt
        geometry:
            - margin=1in  
        number-sections: true
        code-line-numbers: true
    # docx: 
    #    toc: true
    #    fig-format: png
    #    number-sections: true
    #    code-line-numbers: true

date-format: "ddd., MMM. D"

# See Quarto docs: https://quarto.org/docs/authoring/footnotes-and-citations.html
# you can export your references from Zotero, EndNote, or other reference managers
# from Zotero you'll need https://retorque.re/zotero-better-bibtex/
references: JBibliography.bib

# recommended, but not required
# you will need jupyter-cache installed
execute: 
  cache: true
---

# Introduction

## Problem Statement

So far, our simulations have considered the Net Present Value of home elevation under the assumption that homeowners will pay for their home elevation out of pocket.  In reality, people have to chose between paying out of pocket (if this is even something they can afford), taking out a loan, or saving up.  

Each of these options has tradeoffs in total cost, yearly cost, the cost of damages,and in NPV.  In this paper, we will analize these tradeoffs. 

## Selected Feature

Describe the feature you have selected to add to the existing decision-support tool.
Discuss how this feature relates to the problem statement and its potential to improve climate risk assessment.

The new feature I've chosen to implement is a struct called "Finance".  This struct describes the financial conditions of the home, and the plan to elevate it.  It includes a loan variable, that describes if the owners will take out a loan to finance the elevation, save up for it, or if they will pay out of pocket.  It also contains a loan_rate variable for the interest on potential loans, loan_years, which describes how long homeowners will either save up for or pay out a loan for, paid_off_percent, the amount of the house that's paid off as a decimal, and paid_off_amnt (the total value of the home that's paid off in US dollars), and savings, the amount of money in the homeowners's savings account. 

In addition to this new struct, run_sim has been modified to take it into account.  So if we chose to save up, our action of elevating the home is delayed until enough money has been saved to do so, and the cost of construction will be increased with the discount rate of that scenario. 

If we choose to take out a loan, we will elevate the home immediately, but then pay off the loan annualy according to the pre-determined interest rate, and the discount rate will again be accounted for in the value of these payments.  

If we pay out of pocket, then nothing changes, and run_sim operates as it did before, but we can't elevate above what we can afford in our savings account.

If we save up, then we make annual payments until we've saved up enough money to elevate.  Whatever's already in the savings account acts as a base we can save on top of.

# Literature Review

Provide a brief overview of the theoretical background related to your chosen feature.
Cite at least two relevant journal articles to support your approach (see [Quarto docs](https://quarto.org/docs/authoring/footnotes-and-citations.html) for help with citations).
Explain how these articles contribute to the justification of your selected feature.

Whether this feature is used to inform policy or the decisions of individual property owners, it has justification in pre-existing literature.

Chenet et. Al (2021) \cite{finance_and_climate:2021} discusses how policy makers ought to take a precautionary approach to addressing the financial impacts of climate change, and that policy "should help justify immediate preventative action".  They argue for using scenario analysis and stress testing to evaluate potential policies.  To this end, this feature could give policy makers a clearer picture about what they ought to do: give homeowners money to elevate their homes or force them to pay for home elevation, set up loan programs for home elevation, and forcing homeowners to save up for home elevation.  This feature can be used to compare these three strategies.

Tools that communicate the propery-level impacts of flooding to homeowners and community leaders are advocated for in \cite{property_impacts:2020} .  This project can be thought of as an extension of this idea, that the same benefits that can be extracted from communicating the costs and benefits of home elevation can also be extracted from providing more information about how those costs and benefits change under different financial plans. 



# Methodology

## Implementation

```{julia}
import Pkg 
Pkg.status()  # Note the paths for your local packages
Pkg.gc()  # Garbage collect and delete cached package files
```


```{julia}
using CSV
using DataFrames
using DataFramesMeta
using Distributions
using LaTeXStrings
using Metaheuristics
using Plots
using Random
using Unitful

Plots.default(; margin=5Plots.mm)
```

```{julia}
using Revise
using HouseElevation
#include("Finance.jl")
#using house
```

We put in our house in galveston

Choosing Galveston Pier 21, Texas
The guage is at 29° 18.6 N, 94° 47.6 W
https://maps.app.goo.gl/GyanSMA2fp9rkVrT9

Our building is 302 17th St, Galveston, TX 77550,
Home area as estimated by google maps: 30ftx50ft home = 1500ft^2
Home value from zillow: 247,700 (Round up to 250,000)

The home is 4.41 feet or 1.34 meters above sea level in elevation.
Looking at it on street view, the house appears to be on concrete blocks about 6 inches tall, giving it an effective height of 4.91 feet.  Round this up to 5 so that it works.

Row 98 from the data is two-story, no basement in Galveston, so we'll be using that for our depth-damage curve.  The home is on concrete blocks, so we can be confident that it doesn't have a basement.



```{julia}
#| output: false
house = let
    haz_fl_dept = CSV.read("data/haz_fl_dept.csv", DataFrame) # read in the file
    desc = "Two-story, no basement in Galveston"
    row = @rsubset(haz_fl_dept, :Column1 == 98)[1, :,] # select the row I want
    area = 1500u"ft^2"
    height_above_gauge = height_above_gauge = 5u"ft"  
    House(row; area=area, height_above_gauge=height_above_gauge, value_usd=250_000)
end
```


```{julia}
#| output: false
slr_scenarios = let
    df = CSV.read("data/slr_oddo.csv", DataFrame)
    [Oddo17SLR(a, b, c, tstar, cstar) for (a, b, c, tstar, cstar) in eachrow(df)]
end

function draw_surge_distribution()
    μ = rand(Normal(5, 1))
    σ = rand(Exponential(1.25))
    ξ = rand(Normal(0.1, 0.05))
    return GeneralizedExtremeValue(μ, σ, ξ)
end

function draw_discount_rate()
    return 0.055  #fix interest rate at 5.5%
    #return rand(Normal(0.05, 0.03))
end

function draw_sow()
    slr = rand(slr_scenarios)
    surge_params = draw_surge_distribution()
    discount = draw_discount_rate()
    return SOW(slr, surge_params, discount)
end
```

Generate our possible states of the world

```{julia}
Random.seed!(421521)
N_SOW = 10
N_SOW_opt = 50 # to start
sows = [draw_sow() for _ in 1:N_SOW]
sows_opt = first(sows, N_SOW_opt)


```


Write our function we'll use to evaluate financial plans 


## Financial_NPVS function

```{julia}

#assume physical house and SLR scenarios stay constant, only financial conditions change
function financial_npvs(finance)
    p = ModelParams(; house=house, years=2024:2083, finance=finance)  #make our model 

    elevations_try = 0:0.5:14  #establish actions to try 
    actions_try = Action.(elevations_try)

    
    if p.finance.loan == 1 #if taking out a loan
        #Get all the contruction costs we can afford through equity
        construction_costs = [elevation_cost(house, elevation) for elevation in elevations_try if elevation_cost(house, elevation) <= p.finance.amnt_paid_off]
    elseif p.finance.loan == 0 #if paying out of pocket
        #must have enough in savings to pay
        construction_costs = [elevation_cost(house, elevation) for elevation in elevations_try if elevation_cost(house, elevation) <= p.finance.savings]
    else # if we're saving up, we can try all possible outcomes
        construction_costs = [elevation_cost(house, elevation) for elevation in elevations_try]
    end


    actions_try = actions_try[1:length(construction_costs)]  #get the list of actions we can afford
    elevations_try = elevations_try[1:length(construction_costs)]  #limit elevations as well since we output this later

    #Run simulations 
    npvs_opt = [mean([run_sim(a, sow, p) for sow in sows_opt]) for a in actions_try]  

    #get height that minimizes NPV
    min_npv, min_idx = findmax(npvs_opt)
    minimizer = elevations_try[min_idx]

    #return elevations we tried (x), npvs(y) and minimizing elevation 
    return elevations_try, npvs_opt, minimizer

end


```

Basic financing, just paying up fronts


println(methods(Finance))
println(fieldtypes(Finance))
## Finance_Basic

```{julia}


finance_basic = let
    loan = 0
    loan_years = 0
    loan_rate = 0.0
    paid_off_percent = 1.0
    amnt_paid_off = paid_off_percent * house.value_usd  # Calculate amnt_paid_off
    savings = 250_000

    # Create Finance object using keyword arguments
    Finance(;
        loan = loan,
        loan_years = loan_years,
        loan_rate = loan_rate,
        paid_off_percent = paid_off_percent,
        amnt_paid_off = amnt_paid_off,
        savings = savings
    )
end
```


Now lets calculate our basic finance options

```{julia}

elevations_tried, npvs, min = financial_npvs(finance_basic)

```

## plot_many
Define our function to plot many financial scenarios 

```{julia}
function plot_many(finance_list, initial_plot)

    
    for finance in finance_list
       
        #println(finance)
        elevations_tried, npvs, min = financial_npvs(finance)
        if finance.loan == 1  #if taking out a loan
            label = "$(round(finance.loan_rate*100))% loan over $(finance.loan_years) years"
        elseif finance.loan > 1
            label = "Saving over $(finance.loan_years) years"
        else 
            label = "Paying out of pocket"
        end
        plot!(
        initial_plot,
        elevations_tried,
        npvs ./ 1000;
        xlabel="Elevation [ft]",
        ylabel="NPV [1000 USD]",
        label=label,
        marker=:circle,
        #color=line_color
        )

         #make the vertical line color the same as the horizontal line
        line_color = initial_plot.series_list[end][:linecolor]
        #line_color = plot_object.series_list[end].plotseries[:linecolor] 
        vline!([min]; label="$(min)ft elevation", linestyle=:dash, color=line_color)
    end
end

```

## reasonable saving time

Generate many financial scenarios where we save up for different periods of time


```{julia}

finance_saving = []

for i in [2, 3, 5, 7]
    #print(i)
    paid_off_percent = 1.0
    savings = 180_000
    fin = Finance(; loan=2, loan_years=i, loan_rate=0.0, paid_off_percent=paid_off_percent,
        amnt_paid_off=(house.value_usd*paid_off_percent), savings=savings
        )
    push!(finance_saving, fin)
end

println(finance_saving)
```

Plot our saving options

```{julia}

p = plot(
    elevations_tried,
    npvs ./ 1000;
    xlabel="Elevation [ft]",
    ylabel="NPV [1000 USD]",
    title="Out of Pocket Vs Various saving periods",
    label="Out of pocket",
    marker=:circle#, color=line_color
)


line_color = p.series_list[end][:linecolor]  #make the vertical line color the same as the horizontal line
vline!([min]; label="$(min)ft elevation", linestyle=:dash, color=line_color)

plot_many(finance_saving, p)
display(p)

```

Results of this graph show two interesting things:

1. NPV of saving is always a lot lower than paying up front.  This makes sense, since we're increasing construction cost with inflation, so the only change to the NPV will be more damages while we wait to elevate the house.

2. NPV results recommend lower elevations if we chose to wait.  This seems strange at first, since most people might save money so they can elevate higher, and you'd think that if we do wait to elevate, it'd make more sense to do a higher elevation to compensate for the damages we experienced in the first few years.  

But since we are doing this simulation over a fixed period of time, the longer we wait to elevate, the less value is gained by elevating, since we'll have spent less of our time avoiding damages.  So assuming a non-infinite time duration for this experiment, the longer we wait to elevate, the lower the recommended elevation height gets.  

We can demonstrate this more clearly by displaying some extremely long saving periods.


## Long saving time

```{julia}

Long_Savings = []

for i in [10, 20, 30, 50]
    #print(i)
    paid_off_percent = 1.0
    savings=180_000
    fin = Finance(; loan=2, loan_years=i, loan_rate=0.0, paid_off_percent=paid_off_percent,
        amnt_paid_off=(house.value_usd*paid_off_percent),
        savings=180_000
        )
    push!(Long_Savings, fin)
end

println(Long_Savings)
```

```{julia}

p = plot(
    elevations_tried,
    npvs ./ 1000;
    xlabel="Elevation [ft]",
    ylabel="NPV [1000 USD]",
    title="Out of Pocket Vs Long saving periods",
    label="Out of pocket",
    marker=:circle#, color=line_color
)


line_color = p.series_list[end][:linecolor]  #make the vertical line color the same as the horizontal line
vline!([min]; label="$(min)ft elevation", linestyle=:dash, color=line_color)

plot_many(Long_Savings, p)
display(p)

```

## Different loan durations

Generate many financial scenarios with different years to pay off the loan at a 7% interest rate

```{julia}

finance_list_years = []

for i in [3, 5, 7, 10]
    #print(i)
    paid_off_percent = 0.7
    savings=180_000
    fin = Finance(; loan=1, loan_years=i, loan_rate=0.07, paid_off_percent=paid_off_percent,
        amnt_paid_off=(house.value_usd*paid_off_percent), savings=savings
        )
    push!(finance_list_years, fin)
end

println(finance_list_years)
```

Plot our scenarios of different years to pay off the loan 

```{julia}



p = plot(
    elevations_tried,
    npvs ./ 1000;
    xlabel="Elevation [ft]",
    ylabel="NPV [1000 USD]",
    title="Out of Pocket Vs Various payment periods",
    label="First $(N_SOW_opt) SOWs, no loan",
    marker=:circle#, color=line_color
)


line_color = p.series_list[end][:linecolor]  #make the vertical line color the same as the horizontal line
vline!([min]; label="$(min)ft elevation", linestyle=:dash, color=line_color)

plot_many(finance_list_years, p)
display(p)

```

## Different interest rates
Generate many financial scenarios with different interest rates

```{julia}

finance_list_rates = []

for i in range(start=3, stop=9, length=4)
    #print(i)
    paid_off_percent = 0.7
    savings = 180_000
    fin = Finance(; loan=1, loan_years=5, loan_rate=i/100, paid_off_percent=paid_off_percent,
        amnt_paid_off=(house.value_usd*paid_off_percent), savings=savings
        )
    push!(finance_list_rates, fin)
end

println(finance_list_rates)
```


```{julia}

#colors = [colorant"red", colorant"green", colorant"blue", colorant"orange", colorant"purple"]

#line_color = colors[1]

p = plot(
    elevations_tried,
    npvs ./ 1000;
    xlabel="Elevation [ft]",
    ylabel="NPV [1000 USD]",
    title="Out of Pocket Vs Various 5 year loans",
    label="First $(N_SOW_opt) SOWs, no loan",
    marker=:circle#, color=line_color
)
#println(p.series_list[end][:linecolor] )

#colors = Plots.palette()

line_color = p.series_list[end][:linecolor]  #make the vertical line color the same as the horizontal line
vline!([min]; label="$(min)ft elevation", linestyle=:dash, color=line_color)

plot_many(finance_list_rates, p)
display(p)
```

## Compare NPVS and annual costs

Now we want to compare NPVS and annual costs for all of these scenarios

Make a function to get NPV, annual cost, and optimal elevatin
```{julia}

function annual_loan_cost(p, r, n)
    #P is principle amount, r is rate, n is number of years
    a = p * ( r * ((1+r)^n)  / ( (1+r)^n - 1 ) )
    return a #a is annual payments
end


function annual_v_npv(finance)
    
    elevations_tried, npvs, best_elevation = financial_npvs(finance)
    #An engineer is not someone who makes things maximally efficient, but someone who makes things efficient enough.
    best_npv, best_idx = findmax(npvs)

    construction_cost = elevation_cost(house, best_elevation)
    #println(elevation_cost(house, best_elevation))

    if finance.loan == 0 #out of pocket
        annual_cost = construction_cost
    elseif finance.loan == 1  #taking out a loan
        annual_cost = annual_loan_cost(construction_cost, finance.loan_rate, finance.loan_years)
    else #saving up 
        annual_cost = construction_cost/finance.loan_years
    end

    return best_npv, annual_cost, best_elevation

end

```


```{julia}


function get_costs(finances)
    figures = annual_v_npv.(finances)
    best_npvs = [fig[1] for fig in figures]
    annual_costs = [fig[2] for fig in figures]
    best_elevations = [fig[3] for fig in figures]

    return best_npvs, annual_costs, best_elevations
end


function plot_money_values(finance, initial_plot, label)

    best_npvs, annual_costs, best_elevations = get_costs(finance)
    plot!(
        initial_plot,
        best_npvs ./ 1000,
        annual_costs ./ 1000;
        xlabel="Optimized NPV [1000 USD]",
        ylabel="Annual Costs [1000 USD]",
        label=label,
        marker=:circle,
        #color=line_color
        )

end


```
get_costs(finance_list_rates)

```{julia}

optimal_npv, annual_cost, best_elevation = annual_v_npv(finance_basic)

Annual_v_npv_plot = plot(
    [optimal_npv] ./ 1000,
    [annual_cost] ./ 1000 ;
    xlabel="Optimized NPV [1000 USD]",
    ylabel="Annual Costs [1000 USD]",
    title="NPV vs Yearly Costs",
    label="Out of Pocket",
    marker=:circle#, color=line_color
)
plot_money_values(finance_list_rates, Annual_v_npv_plot, "Loan, different interest rates")
plot_money_values(finance_list_years, Annual_v_npv_plot, "Loan, different years")
plot_money_values(finance_saving, Annual_v_npv_plot, "Saving for 2-7 years")
display(Annual_v_npv_plot)

```

The chart changes radically when we display long savings times
```{julia}

plot_money_values(Long_Savings, Annual_v_npv_plot, "Saving for 10-50 years")
display(Annual_v_npv_plot)

```



## compare NPVS and construction heights for all these different scenarios 


```{julia}
function general_plot(x, y, finance, initial_plot, label)
    # 1 = best_npvs, 2 = annual_costs, 3 = best_elevation
    values = collect(get_costs(finance)) #get our values to plot.  
    #Using collect makes sure these values are in an array so we can use ./1000 later
    #println(values)
    #println(values[2])
    values[1] = values[1] ./ 1000  #adjust npv and annual costs 
    values[2] = values[2] ./1000
    
    plot!(
        initial_plot,
        values[x],  #decide what to plot 
        values[y];
        label=label,
        marker=:circle,
        #color=line_color
        )
end
```


```{julia}
height_v_npv_plot = plot(
    [optimal_npv] ./ 1000,
    [best_elevation] ;
    xlabel="Optimized NPV [1000 USD]",
    ylabel="Elevation [ft]",
    title="NPV vs Elevation",
    label="Out of Pocket",
    marker=:circle,#, color=line_color
    legend=:bottomright
)

general_plot(1, 3, finance_list_rates, height_v_npv_plot, "Loan, different interest rates")
general_plot(1, 3, finance_list_years, height_v_npv_plot, "Loan, different years")
general_plot(1, 3, finance_saving, height_v_npv_plot, "Saving for 2-7 years")
display(height_v_npv_plot)
```


## compare annual costs and construction heights

```{julia}
height_v_npv_plot = plot(
    [annual_cost] ./ 1000,
    [best_elevation] ;
    xlabel="Annual Cost [1000 USD]",
    ylabel="Elevation [ft]",
    title="Annual Cost vs Elevation",
    label="Out of Pocket",
    marker=:circle,#, color=line_color
    legend=:bottomright
)

general_plot(2, 3, finance_list_rates, height_v_npv_plot, "Loan, different interest rates")
general_plot(2, 3, finance_list_years, height_v_npv_plot, "Loan, different years")
general_plot(2, 3, finance_saving, height_v_npv_plot, "Saving for 2-7 years")
display(height_v_npv_plot)
```

## Low and high savings and equity (LHSE) homes

Now that we're all set up, lets look at scenarios where we have high and low savings and high and low equity (LHSE).

We'll assume that market loans are run at 7% interest and not consider other interest rates, except for govenrment loans for people with low equity and low savings at 7.5%.  

Make a function that generates the finance outcomes for these different plans given a set equity and savings:

```{julia}
function gen_finances(equity, savings, house)

    loan_finances = [] #7.0% bank loan
    gov_loan = []  #7.5% government loan for those in need
    saving_finances = []

    for i in [2, 3, 5, 7]  #saving scenarios 
        fin = Finance(; loan=2, loan_years=i, loan_rate=0.0, paid_off_percent=equity,
            amnt_paid_off=(house.value_usd*equity), savings=savings
            )
        push!(saving_finances, fin)
    end

    for i in [3, 5, 7, 10]  #bank loan scenarios 
        fin = Finance(; loan=1, loan_years=i, loan_rate=0.07, paid_off_percent=equity,
        amnt_paid_off=(house.value_usd*equity), savings=savings
        )
        push!(loan_finances, fin)
    end

    for i in [3, 5, 7, 10]  #government loan scenarios 
        fin = Finance(; loan=1, loan_years=i, loan_rate=0.075, paid_off_percent=1.0,  #gov loan assumes equity doesn't matter
        amnt_paid_off=(house.value_usd*1.0), savings=savings
        )
        push!(gov_loan, fin)
    end

    # Our of pocket elevation
    OOP = Finance(;
        loan = 0,
        loan_years = 0,
        loan_rate = 0.0,
        paid_off_percent = equity,
        amnt_paid_off = (house.value_usd*equity),
        savings = savings
    )

    return OOP, saving_finances, loan_finances, gov_loan

end

```

Now make a function that plots the outcomes for all of these scenarios:

```{julia}

function plot_LHSE_scenario(LHSE_options, title)

    OOP, saving_finances, loan_finances, gov_loan = LHSE_options

    optimal_npv, annual_cost, best_elevation = annual_v_npv(OOP)

    Annual_v_npv_plot = plot(
        [optimal_npv] ./ 1000,
        [annual_cost] ./ 1000 ;
        xlabel="Optimized NPV [1000 USD]",
        ylabel="Annual Costs [1000 USD]",
        title=title,
        label="Out of Pocket",
        marker=:circle#, color=line_color
    )
    plot_money_values(gov_loan, Annual_v_npv_plot, "Government Loan")
    plot_money_values(loan_finances, Annual_v_npv_plot, "Bank Loan")
    plot_money_values(saving_finances, Annual_v_npv_plot, "Saving for 2-7 years")
    display(Annual_v_npv_plot)

end

```


```{julia}
elevation_cost(house, 9.5)
```
Note that the cost to elevate our house 9.5 feet, what was previously considered optimal, costs more than 157,000 US dollars, putting it even out of reach for out of pocket payment by our high-savings individuals. 

Only the wealthiest 10% of americsn have more than 111,000 USD in their bank accounts, so our high-savings individuals with more than 120k are doing fairly well, but still can't afford the "optimal" elevation. \cite{wealth_2023}

Also, it's worth pointing out that our "low savings" individual has 10k in their bank account, but this is still more than 60% of americans \cite{wealth_2023}

```{julia}
#high equity, high savings
high_equity = 0.8
high_savings = 120_000

low_equity = 0.2
low_savings = 10_000
#10k is actally still more than 60% of americans according to the motley fool, which is... sad.

ultra_high_savings = 150_000

```

```{julia}
HEHS = gen_finances(high_equity, high_savings, house)
plot_LHSE_scenario(HEHS, "High Equity ($(high_equity*100)%), High Savings ($(high_savings/1000)K)")
```

```{julia}
HELS = gen_finances(high_equity, low_savings, house)
plot_LHSE_scenario(HELS, "High Equity ($(high_equity*100)%), Low Savings ($(low_savings/1000)K)")
```

```{julia}
LEHS = gen_finances(low_equity, high_savings, house)
plot_LHSE_scenario(LEHS, "Low Equity ($(low_equity*100)%), High Savings ($(high_savings/1000)K)")
```

```{julia}
LELS = gen_finances(low_equity, low_savings, house)
plot_LHSE_scenario(LELS, "Low Equity ($(low_equity*100)%), Low Savings ($(low_savings/1000)K)")
```

It's notable that you need about 150k in your savings to have all elevation options open to you

```{julia}
HEUHS = gen_finances(high_equity, ultra_high_savings, house)
plot_LHSE_scenario(HEUHS, "High Equity ($(high_equity*100)%), Ultra High Savings ($(ultra_high_savings/1000)K)")
```


## testing

#```{julia}
test_plot = plot(
    [optimal_npv] ./ 1000,
    [annual_cost] ./ 1000 ;
    xlabel="Optimized NPV [1000 USD]",
    ylabel="Annual Costs [1000 USD]",
    title="NPV vs Yearly Costs",
    label="Out of Pocket",
    marker=:circle#, color=line_color
)
general_plot(1, 2, finance_list_rates, test_plot, "Loan, different interest rates")
general_plot(1, 2, finance_list_years, test_plot, "Loan, different years")
general_plot(1, 2, finance_saving, test_plot, "Saving for 2-7 years")
#display(Annual_v_npv_plot)
#```



Now we want to compare NPVS and construction heights for all these different scenarios 


## Next: add indicators to annual_v_npv plot that shows what thing is what



You should make your modifications in either the `HouseElevation` or `ParkingGarage` module.
Detail the steps taken to implement the selected feature and integrate it into the decision-support tool.
Include code snippets and explanations where necessary to clarify the implementation process.

## Validation

In this case, we don't really _need_ optimization -- we can use brute force.
We can compare by plotting the objective function for a range of elevations (from 0 to 14 ft) using all SOWs.



As we have seen in labs, mistakes are inevitable and can lead to misleading results.
To minimize the risk of errors making their way into final results, it is essential to validate the implemented feature.
Describe the validation techniques used to ensure the accuracy and reliability of your implemented feature.
Discuss any challenges faced during the validation process and how they were addressed.

# Results

Present the results obtained from the enhanced decision-support tool.
Use tables, figures, and visualizations to clearly communicate the outcomes.
Provide sufficient detail to demonstrate how the implemented feature addresses the problem statement.
Use the `#| output: false` and/or `#| echo: false` tags to hide code output and code cells in the final report except where showing the output (e.g.g, a plot) or the code (e.g., how you are sampling SOWs) adds value to the discussion.
You may have multiple subsections of results, which you can create using `##`.

# Conclusions

## Discussion

Analyze the implications of your results for climate risk management.
Consider the context of the class themes and discuss how your findings contribute to the understanding of climate risk assessment.
Identify any limitations of your approach and suggest potential improvements for future work.

## Conclusions

Summarize the key findings of your project and reiterate the significance of your implemented feature in addressing the problem statement.
Discuss the broader implications of your work for climate risk management and the potential for further research in this area.

# References




```{bibliography}
